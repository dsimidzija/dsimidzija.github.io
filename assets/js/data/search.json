[ { "title": "Euro Truck Simulator 2, G29, and headtracking on linux", "url": "/posts/euro-truck-simulator-2-headtracking-linux/", "categories": "Gaming", "tags": "gaming, linux, aitrack, opentrack, G29", "date": "2023-04-30 00:00:00 +0000", "snippet": "IntroSetting up a basic driving platform on a Linux machine is “easy enough”, provided you have all the information you need.The problem is that the information is scattered all over the internet: on Github, official SCS forums, a few unofficialand obscure ones, several subreddits, etc. This is my attempt at documenting the ridiculous hacks totally legitsteps I did, in case someone else finds the information useful (and, of course, for my own reference).Notes: I’m using ETS2 Steam version on Arch Linux, if you’re using a different combination you might need some tweaks. This is about setting up headtracking without a dedicated headtracking/eyetracking hardware device (or VR),using just your webcam and some software.Setting up G29Setting up a driving platform on Linux with Logitech G29 wheel is fairly straightforward. The first thing to do is tois make sure that the switch on the wheel is set to PS3 and not PS4. Then open ETS2 properties on Steam, and disableSteam Input. If you don’t do this, ETS2 won’t be able to see your wheel as an actual wheel, as Steam Input will showit as a regular controller. Note: Looks like this step might not be necessary anymore, Steam changelog claims that they have fixed incorrectdetection of G29 as a regular controller instead of a wheel, but I haven’t tested it personally.Disable Steam Input, but with a big useless red arrowSecond, to enable all the force feedback stuff on your wheel, you will need to install new-lg4ff-dkms-git andreboot your system. Then you should be able to configure your wheel via oversteer. The only thing that’s not workingfor me are the RPM LEDs, and I’m still looking for a way to enable them. They are probably very operational, but ETS2probably needs a telemetry plugin to use them.On your next ETS2 run, it will recognise the wheel and you can configure it as usual.Setting up headtrackingSetting up headtracking for ETS2 doesn’t seem to difficult on Windows machines, if youtube videos areany indication. You just install some software, and it pretty much works out of the box. However, FreeTrack outputfor opentrack is not supported on Linux (at the time of writing this, at least). What is described in this articlea really hacky workaround, but I’m documenting it nevertheless as it wasn’t easy to collate the info from various(and incomplete) forum posts.Installing aitrack &amp;amp; opentrackFirst step is installing aitrack, via the PKGBUILD repo.git clone https://github.com/mdk97/aitrack-linux-pkgbuild.gitcd aitrack-linux-pkgbuildmakepkg -siIf sometimes you get an error while trying to run aitrack, you might need to rebuild/install the package:$ aitrackaitrack: error while loading shared libraries: libopencv_gapi.so.406: cannot open shared object file: No such file or directoryThen install opentrack, which should be an easy task on most platforms.For Arch it is already available in AUR.Connecting everythingFirst you need to run aitrack and configure it to output to 127.0.0.1:4242.You can also tweak the camera resolution and FPS according to your specs. More is better, but if you don’t have apowerful machine, it may cause some performance issues. Generally speaking though, you’ll get virtually the sameperformance on lower resolutions and FPS, so it doesn’t really matter much.Onwards to opentrack configuration, you need to select “UDP over network” as your input, and in the configurationdialog for it (the weird box-button next to it) use the same port as in aitrack (4242 by default).Then select “libevdev joystick receiver” for output.Now comes the difficult part: actually tweaking the tracking in opentrack so you can peek at the rear-view mirrorsin the game, but still see the screen in front of you.First things first, you should assign aitrack outputs to X &amp;amp; Y inputs for your virtual joystick. Note that on mysystem I had to invert the pitch output (mapped to Y axis), but note that this might not be necessary for you.Then, you need to go to opentrack mapping dialogue, and tweak X &amp;amp; Y ranges and curves according to your preferences.Technically, this is actually the last step of this guide, I’m putting it here just so you can check that aitrackand opentrack are correctly linked.Later on, this will honestly be the trickist part, with a lot of trial and error with ETS2 running and a lotalt-tabbing. The key information to remember: Max input and max output determine how much of your head rotation will be represented in the game (e.g. 30cm rotationIRL equals 150cm in-game rotation), which is important because you don’t want this to be 1:1, otherwise you won’t beable to see the screen without some serious eye gymnastics. You’ll probably want to have “eased” curves for rotation, with a decent deadzone, otherwise your in-game head isgoing to behave very jerky and it’s going to be very jarring.That should be it as far as aitrack and opentrack go, once you start both of them, you should be seeing the pinkoctopus move around when you turn your head left-right and up-down.Configuring ETS2Euro Truck Simulator 2 now has to somehow use this virtual joystick. Unfortunately, it’s not possible to configure itfrom within ETS2 settings, so you have to edit the configuration files directly. But, in order to do that, you firsthave to tell ETS2 to use this joystick for input:Once it’s selected there, just exit ETS2 to save the selection in ETS2 config. Next step is to open~/.local/share/Euro Truck Simulator 2/steam_profiles/&amp;lt;some random string&amp;gt;/controls_linux.sii in your favouriteeditor, which should be Vim. Inside this file, we’re just going to tell ETS2 to use inputs from this virtualjoystick as headtracking inputs, which - as mentioned - sadly isn’t possible to do witin ETS2. If you’re not sure what you’re doing, create a backup copy of controls_linux.sii before you do anything.First, check which device number was assigned to your virtual joystick. Most commonly, it will be joy2 (with joybeing your actual wheel), but this can obviously vary.Then, locate lines which have mix headtron, mix headtryaw, mix headtrpitch, and change them to the following:config_lines[280]: &quot;mix headtron `1 | c_ht_on &amp;amp; (trackiron | hmdon | eyeposon)`&quot;config_lines[281]: &quot;mix headtryaw `sel(trackiron, trackiryaw, 0) + sel(hmdon, hmdyaw, 0) + sel(eyeposon, eyeposyaw, 0) + -joy2.x`&quot;config_lines[282]: &quot;mix headtrpitch `sel(trackiron, trackirpitch, 0) + sel(hmdon, hmdpitch, 0) + sel(eyeposon, eyepospitch, 0) + joy2.y`&quot;Save the file, and you should be done, headtracking should be operational within ETS2. Now it is only a matter oftweaking the curves in opentrack until you get it “just right” for your needs.IMPORTANT NOTES:ETS2 may change the configuration file format, so the changes above may not be 100% valid, pay close attention to theactual values! Pay attention to the XYZ number within config_lines[XYZ], don’t change them if they don’t match the numbersshown here! If the lines are significantly different from what is shown here, the actual changes are: headtron: only add 1 | at the beginning of the value to unconditionally activate head tracking. headtryaw and headtrpitch: only add the last part of the equation: + -joy2.x and + joy2.y, respectively.If necessary, replace the joy2 part with appropriate value from your file. Notes and caveats I haven’t been able to configure roll to work smoothly, so I’ve given up on it, as it’s not really all that important.Personally I really only care about being able to check the rear-view mirrors without the need to take my hands offthe wheel and play around with the mouse. You always need to start aitrack &amp;amp; opentrack before starting ETS2. As mentioned at the beginning, RPM LEDs are not working on the wheel, though there are someonline resources which seem to indicatethat this should be possible to accomplish. If you have noticed an error in this guide, or have a way of improving/simplifying it, please let me know via agithub issue on this page repo.LinksSome useful and semi-useful links I ran into while researching how to do this: https://wiki.archlinux.org/title/Logitech_Racing_Wheel https://github.com/AIRLegend/aitrack/wiki/User-guide https://steamcommunity.com/app/227300/discussions/0/648816742950435869/ http://www.trainsimdev.com/forum/viewtopic.php?f=38&amp;amp;t=227&amp;amp;start=20 https://www.reddit.com/r/linux_gaming/comments/yx3mfz/head_tracking_on_linux/ https://github.com/berarma/new-lg4ff/issues/38 https://github.com/RenCloud/scs-sdk-plugin https://modding.scssoft.com/wiki/Documentation/Engine/SDK/Telemetry https://forum.scssoft.com/viewtopic.php?t=24924 https://roextended.ro/forum/viewtopic.php?t=1776" }, { "title": "Introducing Althaia: a speedy Marshmallow fork", "url": "/posts/introducing-althaia-speedy-marshmallow-fork/", "categories": "Programming", "tags": "programming, python, marshmallow, serialization, marshalling, althaia", "date": "2021-12-30 00:00:00 +0000", "snippet": "Althaia is a drop-in replacement for the #1 Python serialization library -marshmallow. It is also a shallow fork of marshmallow, basically usingthe entire marshmallow source with a few patches to speed up the dump operations.TL;DR$ pip install althaia# patch python&#39;s sys.meta_path to allow althaia to handle all marshmallow importsimport althaiaalthaia.patch()# use marshmallow as if nothing changed, except now it&#39;s 45% fasterfrom marshmallow import Schemaclass ConquestOfBread(Schema): # etc...BackgroundA while back at work, we ran into some performance issues with a few endpoints while dumpingsome mildly large datasets. This was quite surprising because these were just regularJSON objects with fairly common fields. Additionally, we’re not talking about millionsor even billions of rows, just somewhere in the range of 5k-20k query results (so far).Upon further inspection, we realised the problem was marshmallow, and not our own code.This is a surprise, to be sure, but an unwelcome one. Sadly, there was no time to do anythingabout it as the project had to be done on schedule, so we simply worked around the issueas best as we could.However, this continued to bug me privately - why is it so inefficient? While attempting towork around this performance problem, I attempted to find an alternative serializationlibrary, one that could easily replace marshmallow. One of the first results you get whenyou try to find something like that is the Python Serialization Benchmark page,which lists most relevant serialisation libraries, and some lesser-known ones.While going through the list, I realised that all the alternatives lack some of the keyfeatures marshmallow offers, most notably dynamic schemas, but also the entire ecosystemof validators and helper libraries that surrounds marshmallow. Not to mention the fact thatwe had a somewhat mature project on our hands, and reimplementing everything we did withmarshmallow with some of the more obscure libraries is a rather dubious endeavor resource-wise,even if we had proof that it can be done.There was no other way to find out what’s happening than to fire up cProfile, morespecifically line_profiler, and try to figure out why marshmallow was underperforming.It didn’t take long to figure out that the culprits were Schema.get_attribute() andField.serialize().The ProblemThese two methods are at the core of marshmallow’s dumping operations, and their fatal flawis doing what is considered a semi-joke definition of madness: doing the same operation overand over again, and expecting a different outcome. In other words, for each object in acollection that is being dumped, marshmallow is trying to get the field configuration, inaddition to the field value.At first glance, this is a reasonable thing to do; for example, you have to figure out howto behave when a field is missing in the source object. The problem arises when you’re dumpingsomewhat large collections of objects, where marshmallow is going to try to detect how tobehave for each field and each object in the collection. If you’re dumping a collection of10k objects, and a single object has 15 fields, that’s 150k(!) lookups. In addition, if youtake into consideration that each lookup involves multiple deep-level calls all around theinheritance tree, things get very slow very quickly (pun intended obviously).The Solution(s)So I wanted to (try to) do two things: See if we can somehow figure out some things only once while dumping a collection Compile everything with Cython and see if it makes any differenceAs it turns out, both things were possible, and they bring about a significant performanceimprovement! The initial version of “first item” fixes were submitted to marshmallow repo asPR #1649, where I also discovered that this problem was already discussed in detailin issue #805.Additionally, to compile marshmallow with Cython, I needed to change some of the type hints.What’s weird about those is that type and typing.Type[type] are supposed to be equivalent,but apparently the compiler doesn’t think so.How does it perform?According to the “official” tests from the marshmallow repo, the two fixes above shave off about45% of execution time (~35% coming for the code changes, ~10% coming from the Cython compilation).For large(-ish) datasets, this is quite significant.Compared to Toasted Marshmallow, Althaia seems to perform slightly worse, but Istill need to run proper benchmarks and contribute a PR to the Serialization Benchmarks repo(the initial run is already visible in the README.md). The problem with Toastedis that it requires client-side code changes to use, and the fact that it is stuck on usingmarshmallow v2, which is quite old right now and already outperformed by marshmallow v3+.Not to mention that it doesn’t support dotted syntax and other goodies.Althaia maintains full compatibility with marshmallow, with nearly the same gains as when usingToasted.Note: The benchmarks in Python Serialization Benchmark are a bit fishy: it looks likeToasted Marshmallow is overwriting the marshmallow installation, so theresults for it are severely misrepresented by testing the version installed by Toasted.Let’s compare the numbers (all values are usec/dump from the official benchmark): Toasted (base/v2) Toasted (optimized) Latest Marshmallow Althaia 2682.61 176.38 444.91 239.24 The first two numbers are taken from the Toasted readme, while the last two are local benchmarks.Obviously, Toasted base marshmallow is very slow compared to the latest release. The entirerepo may require a rewrite to compare each library in a separate environment.Surprisingly (but also maybe not), running Althaia on PyPy with the cython-compiled modules actuallyreduces performance by a very significant amount, so the compilation step has been disabled forPyPy installations. The code optimisations improve the performance on their own by about 15%(79.85 vs 68.38 usec/dump), quite a bit less than the average 45% gain on CPython.How does it work?The final implementation is actually fairly simple, we use the upstream marshmallow as a gitsubmodule, copy all the sources and change all the namespaces from marshmallow toalthaia.marshmallow, and then apply our patches (from the patches/ folder). Then we compileeverything with Cython, and build all the various binary wheels. Source install will requirecython to compile the modules locally, and while it’s not the slowest thing in the world, youwill notice it. Contributions for more pre-built wheels are welcome.Closing notesI’ve never built or maintained a python package, let alone a cython variant. So there were afew gotchas worth noting: Publishing packages on PyPI is a potential minefield if you’re not careful - once you publisha package, it cannot be updated, replaced, or otherwise modified. Clearly, that makes sense formany reasons (security being a major factor), but it may not be obvious to a new user. Luckily,there is https://test.pypi.org where you can experiment before doing the real thing. Creating a non-trivial Python package is convoluted. Somewhat replicating the experience ofthis reddit rant, when you start looking into it, you can get easily distracted:setup.py, setup.cfg, distutils, setuptools, cython, cffi, PyPA build, … Relevant xkcd Luckily, things are greatly simplified by using pyproject.toml, PEP 517, andPoetry - probably the nicest tool you’ll find in this whole mess. Building manylinux (et al.) wheels is also a tricky task on its own, but luckily there iscibuildwheel which helps a lot. However, even that doesn’t solve everything if you havea custom build/test scripts, like Althaia has, which is painfully obvious in the[tool.cibuildwheel] section(s) of pyproject.toml. If you plan on using the previously mentioned PEP 517 frontend for your custom builds,do not name your build script build.py, or suddenly you won’t be able to actually producea wheel. The reason is, of course, that python -m build is now running your build.py, andnot the PyPA build frontend. Attempting to compile __init__.py with cython on Windows will get yousome weird looks from the linker due to some bullshit historicalreasons. The issue is marked as fixed, but it’s not fixed in the cythonversion published on PyPI. If you have a slow task which is CPU-bound, good luck trying to do it concurrently under CPython,and working around the Global Interpreter Lock. Links Althaia @ PyPI Althaia @ GitHub Marshmallow Docs Marshmallow @ GitHub" }, { "title": "Speeding up pytest + sqlalchemy", "url": "/posts/speeding-up-pytest-sqlalchemy/", "categories": "Programming", "tags": "programming, python, unit-tests, sqlalchemy", "date": "2020-03-22 00:00:00 +0000", "snippet": "A large chunk of python projects use SQLAlchemy as ORM, and in doing so mayactually be doubling their test runs.One of the more interesting things I discovered while running tests withprofiling on is the fact that the most expensive operationswere actually involving database fixtures and user auth. This didn’t make anysense at first, because it was supposed to be a very cheap set of operations ona very small scale.However, on closer inspection I realised that this wasn’tSQLAlchemy per se, it was actually bcrypt!As it is a decently written cryptography library, bcrypt operations aresomewhat expensive (although I’m not sure at this point that it is notvulnerable to timing attacks?), and in the context of unittests, it turns out that they were the most expensive operations.What this means in the practical sense, is that all of thesqlalchemy_utils.PasswordType columns will spend a significant amount of timewhen doing almost anything useful (inserts, updates, comparisons). Since wedon’t really care about password security during tests, this is simply a wasteof time, and a waste of CPU cycles in your pipeline.We solve this problem by doing some metaprogramming, andreplacing the PasswordType with a plain old String column. The rest of yourcode should be none the wiser.from flask_sqlalchemy import SQLAlchemyfrom flask_sqlalchemy.model import DefaultMetafrom sqlalchemy.ext.declarative import as_declarativefrom sqlalchemy_utils import PasswordTypefrom yourproject.config import ActiveConfigdb = SQLAlchemy()class BaseModelMetaclass(DefaultMeta): def __new__(cls, name, bases, dct): obj = super().__new__(cls, name, bases, dct) if ActiveConfig.TESTING: for key, value in dct.items(): if not isinstance(value, db.Column): continue if isinstance(value.type, PasswordType): value.type = db.String(100) return obj@as_declarative( metaclass=BaseModelMetaclass,)class BaseModel(db.Model): __abstract__ = TrueThis example uses flask-sqlalchemy, but obviously it will work without theflask wrappers. The key element here is the ActiveConfig.TESTING flag, so youdon’t accidentally replace all the password fields in production as well.Results may vary of course, but for the first project where we applied this,test runs went from ~14.5 minutes to ~6 for less than a 1000 tests. For largeprojects, time savings could be even more significant." }, { "title": "How not to do database migrations", "url": "/posts/how-not-to-do-database-migrations/", "categories": "Programming", "tags": "android, sms, sqlite, howto", "date": "2015-07-08 00:00:00 +0000", "snippet": "This is a short story of how I lost all my SMS messages on my Android phone,then got (most of) them back, and in the process learned how horribleAndroid TelephonyProvider is.Once upon a time, I woke up and all of my messages were gone. Well, it wasn’treally out of nowhere, a few android services were updated the day before, and Iguess that had something to do with the..slight vanishing of things.After freaking out because I had a lot of messages there I’d like to keep (someof which are from people who are no longer among the living), I tried to figureout what happened and if there is a way to bring them back.Luckily, I discovered there is a backup file, of origin unknown, and abouta month old. SMS data is usually stored in an SQLite database located in/data/data/com.android.providers/telephony/databases/mmssms.db, so I triedsimply copying the backup file to that location, but the app refused to use itand always created a new database, deleting the existing.After quite a bit of searching, I discovered that the backup database iscorrupt, and was being rejected by the SQLite driver. Fixing it means losingsome data (~300 messages in my case), but it’s still a better deal thanlosing everything. I restored as much as possible by running this:$ echo &#39;.dump&#39; | sqlite3 mmssms.db | sqlite3 mmssms-repaired.dbUnfortunately that version of the database didn’t work either, the app stillrefused to use it and deleted everything again. Using logcat I managed to finda lot broken queries run by “MmsSmsDatabaseHelper”, and by broken I mean tablemigrations for tables which were already created. So the app was trying tomigrate a database (and that’s probably fine), but it still didn’t explain whyit would delete everything if it failed?The horror, the horrorAnd then I saw the monster which is MmsSmsDatabaseHelper.java, moreprecisely, the monster which is the onUpgrade method. If you’veopened that, you’re staring at a method which has 300+ lines of code which issupposed to migrate the database, but which will also delete everything inthe database if it fails…anywhere. Just ran a query which creates a table,and that table already exists? Well, say goodbye to your data!So basically, instead of doing migrations like anormal person, they did that… that thing, whatever that is.I have no idea how something shitty like this can be in production. I canunderstand bugs and corrupt databases, error and mistakes are an integral partof software engineering, but I can’t understand having code which deletesusers’ data on purpose. That’s just beyond ridiculous.Anyway, the solution was to find out which migrations were not executed onthe restored database, update it manually, and then set the databaseversion to the one being migrated to (PRAGMA user_version = 60;).I found the necessary information by looking through MmsSmsDatabaseHelper.java,SQLiteDatabase.java, and logcat.Bonus *Check this out:E/MmsSmsDatabaseHelper( 2414): android.database.sqlite.SQLiteException: table cmas already exists (code 1): , while compiling: CREATE TABLE cmas (_id INTEGER PRIMARY KEY AUTOINCREMENT,sms_id INTEGER,thread_id INTEGER,service_category INTEGER,category INTEGER,response_type INTEGER,severity INTEGER,urgency INTEGER,certainty INTEGER,identifier INTEGER,alert_handling INTEGER,expires INTEGER,language INTEGER,expired INTEGER DEFAULT 1);(...snip...)E/MmsSmsDatabaseHelper( 2414): at com.android.providers.telephony.MmsSmsDatabaseHelper.upgradeDatabaseToVersion57(MmsSmsDatabaseHelper.java:2468)Looks like a normal error message?And it is…except for the fact that you can’t really find that migration!upgradeDatabaseToVersion57 does something completely unrelated,and googling “upgradeDatabaseToVersion57 cmas” (and similar queries)gets you “Your search did not match any documents”. Either my google-fu isseriously flawed (a distinct possibility), or this is some new ninja-migrationstuff.Either way, whoever wrote this migration code should be visited by ninjas." }, { "title": "Book review: Highcharts Essentials", "url": "/posts/book-review-highcharts-essentials/", "categories": "Reviews", "tags": "books, reviews", "date": "2014-12-29 00:00:00 +0000", "snippet": "Book: Highcharts EssentialsAuthor: Bilal ShahidOnline: Amazon, Packt PublishingISBN-13: 9781783983964Highcharts Essentials is a short and straightforward book about the Highcharts library, its use and customisation.Disclaimer: I have received a free digital copy of the book in exchange for writing this review, and although it did not affect my opinion in any way, I’m putting it out there just in case.Highcharts Essentials (HE) is a very to-the-point book describing Highcharts API and its use, from simple basics to theming, customisation and event handling. It is filled with code examples accompanied by downloadable versions which you can modify for your own endless enjoyment. The actual text describes what the code samples are doing and why.The writing and explanations are clear, but as it is to be expected from a book like this, very dry. Progression is nicely done, going from the “hello world” equivalent of Highcharts, to exploring API callbacks, processing different input types etc. Examples are provided for most chart types, with frequently used types explored in more detail than the more obscure ones.You’d probably never guess this from the book’s name, but it is a part of the publisher’s “Essentials” series, described as “Fast paced, concentrated introductions showing the quickest way to put the tool to work in the real world”. Given this as a sort of a “mission statement”, the book delivers what it’s supposed to. All the examples are very clear and easy to follow, the code is readable, and it’s surprisingly clutter free.So…is this book worth buying?Right from the start I’ll say that I’m not a big fan of this type of book. From my limited experience, books about software engineering which describe APIs are usually short lived and become obsolete as soon as they are published, especially when dealing with the ever-changing world of open source libraries and frameworks. Of course this isn’t always the case, and even when it is, these books still have value for the novice engineers out there.Speaking of that, another thing which bugs me with books like this one is the target audience. The examples are simple, and the explanations are simple, and in a lot of cases - too simple. The question that needs to be asked is: What new information am I learning from this book that I can’t learn from reading the official documentation? Until you get to the last few chapters, it looks like the answer is - none. The official documentation offers jsfiddle examples for every option in there, so it’s very easy to try out things and learn as you go. And although the book has a few hidden gems (in terms of explaning some options and their relation to other options), large swaths of content could simply be replaced with the official documentation.In spite of all this, as mentioned before, in terms of “essentials” this book delivers what it promises. It is a good reference, and the chapters on customisation could prove to be very useful when faced with insane deadlines. Sadly, you won’t learn (m)any super-advanced tricks about the Highcharts API, but for most users - especially novice users - that’s not even necessary. If you don’t like digging through the documentation and instead you like a guiding hand of a tutor, this book is for you.7.5/10 - Useful as a quick reference, but probably won’t stand the test of time in your non-virtual library." }, { "title": "Book review: The Complete Maus", "url": "/posts/book-review-the-complete-maus/", "categories": "Reviews", "tags": "books, reviews", "date": "2014-11-17 00:00:00 +0000", "snippet": "Book: The Complete MausAuthor: Art SpiegelmanOnline: Amazon, BookdepositoryISBN-13: 9780141014081Maus is not an easy book to review. It was recommended to me by a good friend quite a while ago. Took me a while to get it and now I feel sorry for waiting so long. It’s not an easy book to read, and it’s not an easy book to stop reading.Maus is a graphic novel about the Holocaust, in which the author is telling two stories in parallel. One is his father’s story about the survival in Auschwitz and the other one is about the complex relationship the author himself has with his father. Oh and, everyone is drawn as an animal: Jews are drawn as mice, Germans are drawn as cats, Poles are drawn as pigs and so on. The description sounds absurd, yet somehow it works..almost too perfectly.I’ve read plenty of shocking books about WWII, and yet this one hit hard. It is - possibly due to the fact that it’s a comic - the most personal account of the events I’ve ever read. The choice of drawing Jews as mice seemed curious at first, I really didn’t expect that the author could convey a wide range of emotions through the face of a mouse.. But not only did he manage to do that, he succeeded in conveying that which is unspeakable.For this reason alone, I’d recommend reading the Maus books slowly. Being a comic, you get the urge to read it like you’d read a regular comic, but with Maus, this would be a huge mistake. Spiegelman’s style strikes a gloomy note from the beginning, and it gets so much worse as Vladek’s story becomes a horror above horrors. Maus drawings are very important, one should really take the time to appreciate every single one.In parallel, you follow the authors meta-story about writing the story and talking to his father. The tension between them oozes from the pages and makes you even more anxious.. Normally, you’d be annoyed and frustrated because of Vladek’s often absurd behaviour, but seeing his story makes it difficult to be either of those things. Once you’ve read it, it is completely unsurprising that the subtitle of the first part is “My Father Bleeds History”.Without doubt, this is a book which will make you feel angry and sad at the same time, many times. Seeing Vladek sitting on a sofa with a bowed head, surrounded by photographs of people he lost…it almost feels like you’re peering into his soul. Art’s drawings manage to bring Vladek to life in virtually every panel. You can really sense his fear, anger and most of all his sorrow.This is probably what makes Maus such a good book. Vladek’s survival could be seen as a mere statistical anomaly. After all, he is just one of the few surviving Jews, and plenty of books would probably show his story in that way. Many books talk about the Holocaust in terms of numbers, dates and high level politics and battles. This is a very personal story of Vladek’s - and not only Vladek’s - horrors, struggles, hopes and the few happy moments he had.Last but not least, many have criticised Art for his choice of animals, feeling that it’s “racist” (showing Poles as pigs and so on). I would have to say that it’s probably a very misguided attempt of political correctness; given the fact that his choice of showing everyone as animals shows the absurdity of nationalism, patriotism, religious exceptionalism or whichever form of tribalism is popular today.Maus is a book which had to be written, and a book we all wish didn’t exist.10/10 - Will read many more times, and you should too." }, { "title": "A proper way of learning Vim", "url": "/posts/a-proper-way-of-learning-vim/", "categories": "Programming", "tags": "vim, tricks, productivity, beginner", "date": "2014-08-10 00:00:00 +0000", "snippet": "When I started learning The Editor years ago, I tried out different things to see what is the best way of doing it. Here are some tips which may helpful to you if you’re struggling.We won’t go into whether it’s worth learning how to use Vim. It simply is.The hardest part about learning Vim is probably the fact that it’s just so different from anything you’ve encountered before (and it truly is). So the learning curve is quite steep, since you probably won’t even be able to quit when you first get in. I know I didn’t..The core of the problem is that Vim has a huge amount of commands, even when it’s not extended by anything. Trying to commit a lot of commands to memory when you’ve just started using it is a recipe for a disaster. Unless you have exceptional cerebral powers, there is no way you’re going to remember anything more than a few most frequently used commands. Within this simple fact lies a trick for learning Vim properly.The trick is: learn slowly. In order to use Vim properly and fast, you need to build up some muscle memory first. When you start using it, just moving around with hjkl will be amazingly unintuitive and slow. So don’t think about all the other commands just yet. Use your first week or two to just use Vim like a jackass: use hjkl to move around, i to go to insert mode and ESC to go back to normal mode. That’s it.When you start getting bored with that, remember that you can spice things up with numbers: 5j, 10h etc.. You can also go to insert mode and skip to the beginning of the line with I (capital i), or go to the end of the line with $, move around with w/W/b/B. Ten words? No problem, 10w!When you’ve started navigating with your muscle memory, the real fun begins. You’re now ready to introduce more commands, but only a few at a time (maybe even just one!). The key thing to remember is that every command you learn expands the power of Vim almost exponentially. Why? Because commands can and should be combined!For example, if you know that 10j will move your caret 10 lines below, when you learn that d means delete, you can now do d10j to delete 10 lines below your current position (technically, you’ll delete 11 lines, your current line and 10 below it). Or d10w to delete 10 (i.e. 11) words. Or d$ to delete everything until the end of the line. Now think what you can do when you combine only the commands you can find on any Vim cheatsheet online.The concept of combining Vim commands is precisely what makes Vim The Editor, and it is best described here: What is your most productive shortcut with Vim?. When you’ve figured that out, the rest will come naturally. Whenever you need to do something in Vim and it seems slow, there’s probably a more efficient way of doing it. You just need to find it.Just don’t rush it!:wq" }, { "title": "Creating atomic methods in C#", "url": "/posts/creating-atomic-methods-in-csharp/", "categories": "Programming", "tags": "programming, howto, tricks, c#, .net", "date": "2014-08-05 00:00:00 +0000", "snippet": "Did you ever need a simple way to create an atomic action in your application? Thanks to closures, this has now become trivially easy to accomplish.BackgroundFor some context, here is how I came up with this code. I was working on a hardware simulator application, where each application plugin was a simulator for a specific piece of hardware. The plugins are of course completely isolated from each other, each one loaded and configured dynamically during the runtime, through XML files.A typical run would go through several stages, from loading a project to starting the simulation and running one or more test scripts, written in IronPython. These scripts are used by validation engineers to test the system quickly using our virtual hardware, instead of painstaking manual testing with real hardware (although this has to be done as well from time to time).Since each plugin is loaded and configured dynamically, things can go wrong at any point during startup if any of the plugins is configured incorrectly. This means that it can happen that plugins P1 and P2 are loaded and started, but P3 craps its pants. Now suddenly you have a situation where P1 and P2 are started, P3 has died, and P4 to PX have no idea what’s going on. Obviously this is not good, for many reasons, one of which is that a plugin is more than likely to take up a resource necessary for starting the simulation again (such as serial ports).To avoid leaving a project loaded in this inconsistent state, I wrote a simple C# method which will handle all exceptions and revert/undo what has been done so far. I was able to do this because each plugin/device has the following pairs of methods: BeginRuntime() / EndRuntime() Connect() / Disconnect()Obviously, EndRuntime() should undo everything BeginRuntime() did, or it doesn’t work.CodeSo here is the code:using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace Redacted.Utility{ public class Execute { /// &amp;lt;summary&amp;gt; /// Execute an action atomically, if an exception occurs, /// revert the action by executing actions loaded in the undo stack. /// &amp;lt;/summary&amp;gt; /// &amp;lt;param name=&quot;action&quot;&amp;gt;Action to be executed.&amp;lt;/param&amp;gt; /// &amp;lt;returns&amp;gt;Exception if it occurred, null if execution was successful.&amp;lt;/returns&amp;gt; public static Exception ReversibleAction(Action&amp;lt;Stack&amp;lt;Action&amp;gt;&amp;gt; action) { Stack&amp;lt;Action&amp;gt; undo_stack = new Stack&amp;lt;Action&amp;gt;(); try { action.Invoke(undo_stack); } catch (Exception e) { while (undo_stack.Count &amp;gt; 0) { Action undo_action = undo_stack.Pop(); try { undo_action.Invoke(); } catch { } } return e; } return null; } }}As you can see, it’s very short and to the point. We receive an action which will be executed atomically, and we give it a stack on which it will push anything we need to undo/reverse if an exception occurs. If it does, we simply pop all the actions from the stack and execute them. In this case we don’t care about any exceptions, we want to get as many undos as possible, even if some of them fail. If an exception has occurred, we return it and let the user decide what to do with it.UsageLuckily, the usage is also very simple, and here is the example straight from the source:/// &amp;lt;summary&amp;gt;/// Start project simulation./// &amp;lt;/summary&amp;gt;/// &amp;lt;param name=&quot;project&quot;&amp;gt;Loaded project.&amp;lt;/param&amp;gt;public static void BeginRuntime(Project project){ Exception error = Execute.ReversibleAction( (Stack&amp;lt;Action&amp;gt; undo) =&amp;gt; { foreach (Plugin plugin in project.PluginManager) { plugin.BeginRuntime(); undo.Push(() =&amp;gt; plugin.EndRuntime()); } foreach (Device device in project.DeviceManager) { device.BeginRuntime(); undo.Push(() =&amp;gt; device.EndRuntime()); device.Connect(); undo.Push(() =&amp;gt; device.Disconnect()); } }); if (error != null) { throw error; }}There are three places where this could break, plugin.BeginRuntime(), device.BeginRuntime() and device.Connect(). As mentioned, each one of them has a “reverse” method, which is pushed to the undo stack as soon as their counterpart is called. This is important for obvious reasons. In the end, since this was/is a library method, we just re-throw the exception if it occurred since it’s up to the user interface (GUI/CLI/…) to decide what to do with it.The EndAnd..that’s it. As long as you use it properly (and your code allows you to) this should work for pretty much anything. Of course this has a few limitations, but it can be easily adjusted to fit many more situations. The code itself is somewhat irrelevant, but I think the concept is very nice and widely applicable." }, { "title": "On intellectual snobbery", "url": "/posts/on-intellectual-snobbery/", "categories": "Programming", "tags": "programming, psychology", "date": "2014-07-31 00:00:00 +0000", "snippet": "I recently received a link to a job ad from a coworker, published on a major Croatian job market website. It was so stupid I wrote this.Why was it stupid? Simply put, the amount of snobbery in it was palpable even over the wire.I won’t link or reveal any names to protect the idiots innocent, but here it is, paraphrased (emphasis mine): Advanced knowledge of .NET framework (C#) or C/C++ is required. Desktop/system developers have priority. Knowledge of PHP will be considered a flaw. If you thought about bragging about your web project, it’s better if you don’t. If you can’t name 10 classes from .NET framework or STL off the top of your head, disregard the ad.Did your bullshit detector explode? It certainly should have..This is just a symptom of a much wider phenomenon I’ve noticed in IT. Of course, it may be prevalent in other areas, but I don’t know much about those. I’ve noticed that people always assume that the technology (language, framework etc.) they are using is superior to all others. Implicitly, this means that they are superior to those who use other technologies. This is obviously utter nonsense and shows a particular lack of maturity. By maturity, I mean the kind of maturity that makes you stop saying things like “Why do you like that band, the band I’m listening to is so much better, you should like what I like.”You know, high-school stuff.Don’t get me wrong, I fell into this trap myself more than once. But then I grew up and stopped thinking like an eejit.Unfortunately, this is something I’ve seen happen with all kinds of developers. Initially I thought this only happens to .NET developers because they were the only ones I knew from work. I assumed they are considering open source technologies to be inferior. Unfortunately, that’s not true (well, mostly): plenty of open source developers have the same attitute about their .NET brothers in keyboards.And yes, in both cases it is a sign of immaturity, regardless of age.But let’s talk about this particular case. From what I’ve seen, it stems from the fact that system/desktop developers consider websites a child’s play. Usually because they’ve never made one. It is true that web does have a lower barrier to entry than a complex desktop application, but does that imply that anyone who creates websites is a hack? “Knowing PHP is a flaw”? Oh how I would like to see how these people compare to someone like Mark Story or Chris Hartjes. I mean that must be fun.It was my impression that being proficient in several languages is a huge plus, in both programming languages and spoken languages. However, that information may not reach you if your head is so deep up your arse that your ears are blocked by shite. The advantage is, at least they’ve given themselves away as a company to be avoided." }, { "title": "Reclaiming lost space on ext4 partitions", "url": "/posts/reclaiming-lost-space-on-ext4/", "categories": "Linux", "tags": "linux, fix, ext4, mint, ubuntu", "date": "2014-06-01 00:00:00 +0000", "snippet": "After four years of using Ubuntu 10.10 (Maverick), I’ve finally decided to bite the bullet and upgrade. But then I’ve noticed that the system is reporting 77GB of “Free space” and only 9GB of “Available space”. Turns out I had more free space than I thought…Maverick was the last release with usable (i.e. Gnome2) interface, so I was kind of stuck with it for a long time. Today I decided to install Mint 17 “Qiana”, as Cinnamon now seems mature enough for daily use. While restoring the balance of natural forces on the machine (i.e. reinstalling and configuring everything) I noticed that the System Monitor is reporting the above numbers.After ten minutes of reading various google search results, I discovered that ext4 filesystem will reserve a certain amount of free space for the root user on each partition. Apparently, if your disk gets filled up, you cannot log in anymore. Therefore, a portion of the disk is reserved for root, so he can still log in and fix the issue even if the regular used can’t do a thing.Problem is, ext4 reserves 5% of each partition by default. This was fine years ago when this feature was introduced, but on a more recent 1.5TB partition, that’s some 50+GB of free space wasted. Especially since this reserved space is not needed on non-system partitions, i.e. my /home partition.Luckily, the fix is easy, simply use tune2fs to reduce the percentage of reserved space:sudo tune2fs -m 1 /dev/sda7In this example, the reserved space is set to 1% on sda7.Two things to note here: Yes, you can set it to zero on a non-system partition, but I’d advise against it. ext4 performance can drop dramatically if it gets near 100% utilisation since the reserved space is also used to reduce disk fragmentation. You need to give tune2fs a block device, not a mount point for this to work. In other words, you can’t use sudo tune2fs -m 1 /home.It’s probably time for ext4 maintainers to refine this percentage for large disks." }, { "title": "Adding additional molecule files to molecule screensaver", "url": "/posts/adding-additional-molecule-files-to-molecule-screensaver/", "categories": "Linux", "tags": "linux, ubuntu, gnome, howto", "date": "2014-02-16 00:00:00 +0000", "snippet": "I wanted to add additional molecule definitions to the excellentmolecule screensaver. But in the infinite wisdom of Gnome developers,it is not possible to configure your screensaver through a simple GUI. Becausethat would be too convenient.Of course, you can always use xscreensaver daemon which allows you to configureyour screensavers, but xscreensaver daemon breaks screen locking on activation(i.e. it doesn’t work at all) and that’s a deal-breaker for me.Luckily, there is a workaround, although it took a while to find it. First, you’llneed to get some PDB files and extract them to a folder accesibleto all users on the system. On my system it’s /home/shared/system/molecule, butobviously you can use any folder.Now we’re going to “create” a screensaver by creating a new .desktop file in/usr/share/applications/screensavers. This folder contains the actual commandswhich are executed when the screensaver is to be activated. It’s worth mentioningthat I’m on Ubuntu 10.10, this folder may have moved in the latest versions.In any case, copy the existing molecule file and open the copy inthe editor:$ cd /usr/share/applications/screensavers$ sudo cp molecule.desktop molecule2.desktop$ sudo vim molecule2.desktopChange the Name and Exec line and give molecule the path to your PDB files:$ diff molecule.desktop molecule2.desktop 3,4c3,4&amp;lt; Name=Molecule&amp;lt; Exec=/usr/lib/xscreensaver/molecule -root---&amp;gt; Name=Molecule 2&amp;gt; Exec=/usr/lib/xscreensaver/molecule -root -molecule /home/shared/system/moleculeThe screensaver will now appear as “Molecule 2” in the gnome screensaverpreferences dialog. You can also check man molecule for more things you cancustomise." }, { "title": "Jekyll-Bootstrap themes and GitHub Pages", "url": "/posts/jekyll-bootstrap-themes-and-github-pages/", "categories": "Programming", "tags": "jekyll, jekyll-bootstrap, github, github-pages, fix", "date": "2014-02-15 00:00:00 +0000", "snippet": "UPDATE: This site has since been switched to the elegant theme by the nameof Chirpy.After setting up jekyll-bootstrap and playing with it for a while, I decided totry and set up a custom theme by following the official instructions.Several themes are conveniently available at themes.jekyllbootstrap.com,including the theme you’re looking at right now. But did it work out of the box? No.Of course not.After running rake theme:install git=&quot;https://github.com/dhulihan/hooligan.git&quot;and switching to the newly installed theme, I tried to push to GitHub. Unfortunately,five minutes later, I received the following email:The page build failed with the following error:The submodule `_theme_packages/hooligan` was not properly initialized with a `.gitmodules` file.For information on troubleshooting Jekyll see: https://help.github.com/articles/using-jekyll-with-pages#troubleshootingOf course, looking at the troubleshooting page didn’t help. The issue seemed to bethat the above command adds a new git submodule to _theme_packages/hooligan butdoes not create the .gitmodules file. The solution was simple, althoughannoyingly undocumented: add the _theme_packages folder to .gitignore.Since the folder in question was already in the repo, I had to remove it:git rm -r --cached _theme_packagesThen simply edit your .gitignore and add the _theme_packages folder:*.swp_site_theme_packagesFinally, commit and push to GitHub and you should be done. I’m not sure whetherthis is the correct way to resolve the issue, it looks like this may be a bugin jekyll-bootstrap." } ]
